/*** {{ class.name }} class implementation ***/

{%- block methods %}
{%- for method in class.methods %}
{%- if "abstract" not in method.tags %}
{% filter cpp_blockcomment %}
{%- include "doxygen/method.template" %}
{%- endfilter %}
{% if "constructor" not in method.tags and "destructor" not in method.tags %}{% if "return_const" in method.tags %}const {% endif %}{{ method.return }} {% endif %}{{class.name}}::{{ method.name  }}({{method.arguments | cpp_arguments}}){% if "const" in method.tags %} const{% endif %}
{
{%- if method.template %}
{% filter cpp_section("user_code", method.name, class.name, "custom" in method.tags, indent="	") %}
{% include method.template %}
{%- endfilter %}{# cpp_section "user_code"... #}
{%- else %}
	{%- if "constructor" in method.tags %}
{% filter cpp_section("user_code", method.name, class.name, indent="	") %}
		{%- for property in class.properties %}
			{%- if property.default is defined %}
	m_{{ property.name }} = {{ property.default }};
			{%- endif %}
		{%- endfor %}
{%- endfilter %}{# cpp_section "user_code"... #}
	{%- else %}
{% filter cpp_section("user_code", method.name, class.name, indent="	") %}
	{%- if method.return and method.return != "void" %}
	{{ method.return }} result;
	{%- endif %}
	{%- if method.return and method.return != "void" %}
	return result;
	{%- endif %}
{%- endfilter %}{# cpp_section "user_code"... #}
	{%- endif %}{# "constructor" #}
{%- endif %}{# method.template... #}
}
{%- endif %}{# if "abstract" ... #}
{% endfor %}
{%- endblock %}{# block methods #}
{% block other %}
{%- endblock %}
