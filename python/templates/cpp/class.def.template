{#
	
	class
		.name:string
		.brief:string
		.tags:[]
		.properties:propertie
		.methods:method
		
	propertie
		.name
		.type
		.tags
	
	method
		.name
	
#}

{%- for fwd in class.forwards %}
class {{ fwd }};
{% endfor %}
class {{ class.name }}
{%- if class.parents %}
	: {{ class.parents | cpp_list }}
{%- endif %}
{
private:
	{%- block private %}
	/* Properties */
	{% for property in class.properties %}
	// {{ property.brief }}
	{{ property.type }} m_{{ property.name }};
	{%- endfor %}
	{% block private_extra %}
	{%- endblock %}
	{%- endblock %}
public:
	{%- block public %}
	{%- for method in class.methods %}
	{%- if "constructor" in method.tags or "destructor" in method.tags %}
	{% if "virtual" in method.tags %}virtual {% endif %}{{ method.name  }}({{ method.arguments | cpp_arguments(true) }});
	{%- endif %}
	{%- endfor %}
	/* Property access functions */
	{% for property in class.properties %}
	{%- if "private" not in property.tags %}
	// m_{{ property.name }} read function
	{{ property.type }}{% if "byref" in property.tags %}*{% endif %} {{ property.name }}() const;
		{%- if "readonly" not in property.tags %}
	// m_{{ property.name }} write function
	void set{{ property.name | capitalize }}({{ property.type }} _{{ property.name }});
		{%- endif %}
	{%- endif %}
	{%- endfor %}
	
	/* Other Methods */
	
	{%- for method in class.methods %}
	{%- if "constructor" not in method.tags and "destructor" not in method.tags %}
	{% if "abstract" in method.tags or "virtual" in method.tags %}virtual {% endif %}{{ method.return }} {{ method.name  }}({{ method.arguments | cpp_arguments(true) }}){% if "abstract" in method.tags %} =0{% endif %};
	{%- endif %}
	{%- endfor %}
	{% block public_extra %}
	{%- endblock %}
	{%- endblock %}
protected:
	{%- block protected %}
	{%- endblock %}
	{%- block protected_extra %}
	{%- endblock %}
{% block section_extra %}
{%- endblock %}
};
